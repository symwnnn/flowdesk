<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flowdesk - Deal Pipeline Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #BFC0C0;
            color: #080705;
        }

        .header {
            background: #080705;
            color: #DFFF00;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .header img {
            height: 60px;
            margin-bottom: 8px;
        }

        .header p {
            margin-top: 8px;
            color: #BFC0C0;
            font-size: 14px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .btn {
            background: #DFFF00;
            color: #080705;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .btn:hover {
            background: #c9e600;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(223, 255, 0, 0.3);
        }

        .btn-secondary {
            background: #080705;
            color: #DFFF00;
        }

        .btn-secondary:hover {
            background: #1a1a1a;
        }

        .kanban-board {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .kanban-column {
            background: white;
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            min-height: 400px;
        }

        .column-header {
            background: #080705;
            color: #DFFF00;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 16px;
            font-weight: 600;
            text-align: center;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .deal-count {
            background: #DFFF00;
            color: #080705;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
        }

        .deal-card {
            background: #f8f8f8;
            border: 2px solid #BFC0C0;
            border-radius: 6px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: move;
            transition: all 0.3s;
        }

        .deal-card:hover {
            border-color: #DFFF00;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .deal-card.dragging {
            opacity: 0.5;
        }

        .deal-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .deal-title {
            font-weight: 700;
            font-size: 16px;
            color: #080705;
            flex: 1;
        }

        .priority-badge {
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .priority-high {
            background: #ff4444;
            color: white;
        }

        .priority-medium {
            background: #DFFF00;
            color: #080705;
        }

        .priority-low {
            background: #BFC0C0;
            color: #080705;
        }

        .deal-info {
            font-size: 13px;
            color: #555;
            margin-bottom: 8px;
        }

        .deal-info strong {
            color: #080705;
        }

        .deal-actions {
            display: flex;
            gap: 8px;
            margin-top: 12px;
            padding-top: 12px;
            border-top: 1px solid #ddd;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
        }

        .btn-delete {
            background: #ff4444;
            color: white;
        }

        .btn-delete:hover {
            background: #cc0000;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 12px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-header h2 {
            color: #080705;
            font-size: 24px;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 28px;
            cursor: pointer;
            color: #080705;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            color: #080705;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 2px solid #BFC0C0;
            border-radius: 6px;
            font-size: 14px;
            font-family: inherit;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #DFFF00;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }

        .stats {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .stat-card {
            text-align: center;
            padding: 16px;
            background: #f8f8f8;
            border-radius: 6px;
            border: 2px solid #BFC0C0;
        }

        .stat-number {
            font-size: 32px;
            font-weight: 700;
            color: #080705;
        }

        .stat-label {
            font-size: 14px;
            color: #555;
            margin-top: 4px;
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="https://github.com/user-attachments/assets/8b858359-aa71-41d8-b80d-ab25efbd3e1e" alt="Flowdesk">
        <p>Deal Pipeline Manager for Bankers & Analysts</p>
    </div>

    <div class="container">
        <div class="controls">
            <button class="btn" onclick="openModal()">+ New Deal</button>
            <button class="btn btn-secondary" onclick="exportToPDF()">Export to PDF</button>
        </div>

        <div class="stats" id="stats">
            <div class="stat-card">
                <div class="stat-number" id="totalDeals">0</div>
                <div class="stat-label">Total Deals</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalValue">$0M</div>
                <div class="stat-label">Total Pipeline Value</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="highPriority">0</div>
                <div class="stat-label">High Priority</div>
            </div>
        </div>

        <div class="kanban-board" id="kanbanBoard">
            <div class="kanban-column" data-stage="prospecting">
                <div class="column-header">
                    <span>Prospecting</span>
                    <span class="deal-count">0</span>
                </div>
                <div class="deals-container" id="prospecting"></div>
            </div>
            <div class="kanban-column" data-stage="diligence">
                <div class="column-header">
                    <span>Due Diligence</span>
                    <span class="deal-count">0</span>
                </div>
                <div class="deals-container" id="diligence"></div>
            </div>
            <div class="kanban-column" data-stage="negotiation">
                <div class="column-header">
                    <span>Negotiation</span>
                    <span class="deal-count">0</span>
                </div>
                <div class="deals-container" id="negotiation"></div>
            </div>
            <div class="kanban-column" data-stage="closing">
                <div class="column-header">
                    <span>Closing</span>
                    <span class="deal-count">0</span>
                </div>
                <div class="deals-container" id="closing"></div>
            </div>
        </div>
    </div>

    <div class="modal" id="dealModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">New Deal</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <form id="dealForm" onsubmit="saveDeal(event)">
                <div class="form-group">
                    <label>Target Name *</label>
                    <input type="text" id="targetName" required>
                </div>
                <div class="form-group">
                    <label>Sector *</label>
                    <input type="text" id="sector" required placeholder="e.g., Technology, Healthcare, Finance">
                </div>
                <div class="form-group">
                    <label>Stage *</label>
                    <select id="stage" required>
                        <option value="prospecting">Prospecting</option>
                        <option value="diligence">Due Diligence</option>
                        <option value="negotiation">Negotiation</option>
                        <option value="closing">Closing</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Valuation (USD Million) *</label>
                    <input type="number" id="valuation" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label>Priority *</label>
                    <select id="priority" required>
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Next Steps</label>
                    <textarea id="nextSteps" placeholder="Describe the next actions..."></textarea>
                </div>
                <button type="submit" class="btn" style="width: 100%;">Save Deal</button>
            </form>
        </div>
    </div>

    <script>
        let deals = [];
        let editingDealId = null;

        function openModal(dealId = null) {
            const modal = document.getElementById('dealModal');
            const form = document.getElementById('dealForm');
            const modalTitle = document.getElementById('modalTitle');
            
            form.reset();
            editingDealId = dealId;
            
            if (dealId) {
                const deal = deals.find(d => d.id === dealId);
                if (deal) {
                    modalTitle.textContent = 'Edit Deal';
                    document.getElementById('targetName').value = deal.targetName;
                    document.getElementById('sector').value = deal.sector;
                    document.getElementById('stage').value = deal.stage;
                    document.getElementById('valuation').value = deal.valuation;
                    document.getElementById('priority').value = deal.priority;
                    document.getElementById('nextSteps').value = deal.nextSteps;
                }
            } else {
                modalTitle.textContent = 'New Deal';
            }
            
            modal.classList.add('active');
        }

        function closeModal() {
            document.getElementById('dealModal').classList.remove('active');
            editingDealId = null;
        }

        function saveDeal(event) {
            event.preventDefault();
            
            const deal = {
                id: editingDealId || Date.now(),
                targetName: document.getElementById('targetName').value,
                sector: document.getElementById('sector').value,
                stage: document.getElementById('stage').value,
                valuation: parseFloat(document.getElementById('valuation').value),
                priority: document.getElementById('priority').value,
                nextSteps: document.getElementById('nextSteps').value,
                createdAt: editingDealId ? deals.find(d => d.id === editingDealId).createdAt : new Date().toISOString()
            };
            
            if (editingDealId) {
                const index = deals.findIndex(d => d.id === editingDealId);
                deals[index] = deal;
            } else {
                deals.push(deal);
            }
            
            closeModal();
            renderDeals();
            updateStats();
        }

        function deleteDeal(id) {
            if (confirm('Are you sure you want to delete this deal?')) {
                deals = deals.filter(d => d.id !== id);
                renderDeals();
                updateStats();
            }
        }

        function renderDeals() {
            const stages = ['prospecting', 'diligence', 'negotiation', 'closing'];
            
            stages.forEach(stage => {
                const container = document.getElementById(stage);
                const stageDeals = deals.filter(d => d.stage === stage);
                
                container.innerHTML = stageDeals.map(deal => `
                    <div class="deal-card" draggable="true" data-id="${deal.id}" ondragstart="dragStart(event)" ondragend="dragEnd(event)">
                        <div class="deal-header">
                            <div class="deal-title">${deal.targetName}</div>
                            <div class="priority-badge priority-${deal.priority}">${deal.priority}</div>
                        </div>
                        <div class="deal-info">
                            <strong>Sector:</strong> ${deal.sector}
                        </div>
                        <div class="deal-info">
                            <strong>Valuation:</strong> $${deal.valuation}M
                        </div>
                        ${deal.nextSteps ? `<div class="deal-info"><strong>Next:</strong> ${deal.nextSteps}</div>` : ''}
                        <div class="deal-actions">
                            <button class="btn btn-small" onclick="openModal(${deal.id})">Edit</button>
                            <button class="btn btn-small btn-delete" onclick="deleteDeal(${deal.id})">Delete</button>
                        </div>
                    </div>
                `).join('');
                
                const column = container.parentElement;
                const countBadge = column.querySelector('.deal-count');
                countBadge.textContent = stageDeals.length;
            });
            
            setupDragAndDrop();
        }

        function updateStats() {
            document.getElementById('totalDeals').textContent = deals.length;
            const totalValue = deals.reduce((sum, deal) => sum + deal.valuation, 0);
            document.getElementById('totalValue').textContent = `$${totalValue.toFixed(1)}M`;
            const highPriorityCount = deals.filter(d => d.priority === 'high').length;
            document.getElementById('highPriority').textContent = highPriorityCount;
        }

        let draggedElement = null;

        function dragStart(event) {
            draggedElement = event.target;
            event.target.classList.add('dragging');
        }

        function dragEnd(event) {
            event.target.classList.remove('dragging');
        }

        function setupDragAndDrop() {
            const containers = document.querySelectorAll('.deals-container');
            
            containers.forEach(container => {
                container.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    const afterElement = getDragAfterElement(container, e.clientY);
                    const draggable = document.querySelector('.dragging');
                    
                    if (afterElement == null) {
                        container.appendChild(draggable);
                    } else {
                        container.insertBefore(draggable, afterElement);
                    }
                });
                
                container.addEventListener('drop', (e) => {
                    e.preventDefault();
                    const dealId = parseInt(draggedElement.dataset.id);
                    const newStage = container.id;
                    
                    const deal = deals.find(d => d.id === dealId);
                    if (deal) {
                        deal.stage = newStage;
                        renderDeals();
                        updateStats();
                    }
                });
            });
        }

        function getDragAfterElement(container, y) {
            const draggableElements = [...container.querySelectorAll('.deal-card:not(.dragging)')];
            
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        function exportToPDF() {
            const printWindow = window.open('', '_blank');
            const stages = ['prospecting', 'diligence', 'negotiation', 'closing'];
            const stageLabels = {
                prospecting: 'Prospecting',
                diligence: 'Due Diligence',
                negotiation: 'Negotiation',
                closing: 'Closing'
            };
            
            let html = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Flowdesk Pipeline Report</title>
                    <style>
                        body { font-family: Arial, sans-serif; padding: 40px; }
                        h1 { color: #080705; border-bottom: 4px solid #DFFF00; padding-bottom: 10px; }
                        .stats { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin: 30px 0; }
                        .stat-box { border: 2px solid #BFC0C0; padding: 20px; text-align: center; }
                        .stat-number { font-size: 32px; font-weight: bold; color: #080705; }
                        .stat-label { color: #555; margin-top: 5px; }
                        .stage { margin: 30px 0; page-break-inside: avoid; }
                        .stage-title { background: #080705; color: #DFFF00; padding: 12px; font-weight: bold; font-size: 18px; }
                        .deal { border: 1px solid #BFC0C0; padding: 15px; margin: 10px 0; page-break-inside: avoid; }
                        .deal-title { font-weight: bold; font-size: 16px; margin-bottom: 10px; }
                        .deal-info { margin: 5px 0; font-size: 14px; }
                        .priority { display: inline-block; padding: 4px 10px; border-radius: 4px; font-size: 11px; font-weight: bold; }
                        .priority-high { background: #ff4444; color: white; }
                        .priority-medium { background: #DFFF00; color: #080705; }
                        .priority-low { background: #BFC0C0; color: #080705; }
                        .report-date { color: #555; margin: 20px 0; }
                    </style>
                </head>
                <body>
                    <h1>Flowdesk Pipeline Report</h1>
                    <div class="report-date">Generated: ${new Date().toLocaleString()}</div>
                    
                    <div class="stats">
                        <div class="stat-box">
                            <div class="stat-number">${deals.length}</div>
                            <div class="stat-label">Total Deals</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-number">$${deals.reduce((sum, d) => sum + d.valuation, 0).toFixed(1)}M</div>
                            <div class="stat-label">Pipeline Value</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-number">${deals.filter(d => d.priority === 'high').length}</div>
                            <div class="stat-label">High Priority</div>
                        </div>
                    </div>
            `;
            
            stages.forEach(stage => {
                const stageDeals = deals.filter(d => d.stage === stage);
                html += `
                    <div class="stage">
                        <div class="stage-title">${stageLabels[stage]} (${stageDeals.length})</div>
                `;
                
                stageDeals.forEach(deal => {
                    html += `
                        <div class="deal">
                            <div class="deal-title">
                                ${deal.targetName}
                                <span class="priority priority-${deal.priority}">${deal.priority.toUpperCase()}</span>
                            </div>
                            <div class="deal-info"><strong>Sector:</strong> ${deal.sector}</div>
                            <div class="deal-info"><strong>Valuation:</strong> $${deal.valuation}M</div>
                            ${deal.nextSteps ? `<div class="deal-info"><strong>Next Steps:</strong> ${deal.nextSteps}</div>` : ''}
                        </div>
                    `;
                });
                
                html += '</div>';
            });
            
            html += '</body></html>';
            
            printWindow.document.write(html);
            printWindow.document.close();
            printWindow.focus();
            
            setTimeout(() => {
                printWindow.print();
            }, 250);
        }

        renderDeals();
        updateStats();
    </script>
</body>
</html>
